- name: Initialize master node
  hosts: tag__items___master____ping____ssh__
  remote_user: root
  become: yes
  gather_facts: yes

  vars:
    kube_user: kube_user
    kube_user_home: "/home/kube_user"

  tasks:

    - name: Fail if CPU cores are less than 2 (Kubernetes requirement)
      assert:
        that:
          - ansible_processor_vcpus >= 2
        fail_msg: "Kubernetes requires at least 2 CPU cores. Current: {{ ansible_processor_vcpus }}"

    - name: Create empty kubeadm config file
      copy:
        content: ""
        dest: /etc/kubernetes/kubeadm-config.yaml
        force: yes

    - name: Configure Kubernetes container runtime in kubeadm config
      blockinfile:
        path: /etc/kubernetes/kubeadm-config.yaml
        block: |
          kind: ClusterConfiguration
          apiVersion: kubeadm.k8s.io/v1beta3
          networking:
            podSubnet: "10.244.0.0/16"
          ---
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          runtimeRequestTimeout: "15m"
          cgroupDriver: "systemd"
          systemReserved:
            cpu: 100m
            memory: 350M
          kubeReserved:
            cpu: 100m
            memory: 50M
          enforceNodeAllocatable:
          - pods

    - name: Check if /var/lib/etcd exists
      stat:
        path: /var/lib/etcd
      register: etcd_dir

    - name: Remove /var/lib/etcd if it exists
      file:
        path: /var/lib/etcd
        state: absent
      when: etcd_dir.stat.exists

    - name: Recreate /var/lib/etcd directory
      file:
        path: /var/lib/etcd
        state: directory
        mode: '0700'

    - name: Initialize Kubernetes cluster with kubeadm
      shell: kubeadm init --config /etc/kubernetes/kubeadm-config.yaml >> cluster_initialized.log 2>&1
      args:
        chdir: "{{ kube_user_home }}"
        creates: cluster_initialized.log

    - name: Create .kube directory for user
      file:
        path: "{{ kube_user_home }}/.kube"
        state: directory
        mode: '0755'
        owner: "{{ kube_user }}"
        group: "{{ kube_user }}"

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ kube_user_home }}/.kube/config"
        remote_src: yes
        owner: "{{ kube_user }}"
        group: "{{ kube_user }}"
        mode: '0644'

    - name: Install Flannel Pod Network
      become_user: "{{ kube_user }}"
      shell: |
        export KUBECONFIG=/etc/kubernetes/admin.conf
        kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml >> pod_network_setup.log 2>&1
      args:
        chdir: "{{ kube_user_home }}"
        creates: pod_network_setup.log
      register: flannel_output
      retries: 5
      delay: 15
      until: flannel_output.rc == 0

    - name: Download Calico network manifest
      get_url:
        url: https://projectcalico.docs.tigera.io/manifests/calico.yaml
        dest: "{{ kube_user_home }}/calico.yaml"
        mode: '0644'
        owner: "{{ kube_user }}"
        group: "{{ kube_user }}"

    - name: Apply Calico network manifest
      become_user: "{{ kube_user }}"
      command: kubectl apply -f "{{ kube_user_home }}/calico.yaml"

    - name: Download Kubernetes Dashboard manifest
      get_url:
        url: https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.0/aio/deploy/recommended.yaml
        dest: "{{ kube_user_home }}/dashboard.yaml"
        mode: '0644'
        owner: "{{ kube_user }}"
        group: "{{ kube_user }}"

    - name: Apply Kubernetes Dashboard manifest
      become_user: "{{ kube_user }}"
      command: kubectl apply -f "{{ kube_user_home }}/dashboard.yaml"
